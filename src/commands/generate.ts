import { Command, flags } from '@oclif/command';
import { executeGeneration } from '../generate/generate-module';
import { execQuietly } from '../generate/helpers/execQuietly';
import { Listr } from 'listr2';
import * as path from 'path';
import * as fs from 'fs';
import { findProjectMainPath } from '../generate/helpers/findProjectMainPath';
import { newTask, ListrRenderer } from '../generate/helpers/ListrHelper';

const runTypeGen = async (projectMainPath: string, appPrefix: string) => {
  const customCodegenConfig = path.join(projectMainPath, './codegen.js');
  let codegenConfigPath;
  if (fs.existsSync(customCodegenConfig)) {
    codegenConfigPath = customCodegenConfig;
  } else {
    codegenConfigPath = path.join(__dirname, '../generate/runtime-config-helpers/codegen.js');
  }
  await execQuietly(`APP_PREFIX=${appPrefix} npx graphql-codegen --config ${codegenConfigPath}`, {
    cwd: projectMainPath,
  });
};

const fixGenerated = async (projectMainPath: string) => {
  const customFixGenerated = path.join(projectMainPath, 'fix-generated.js');
  let fixGeneratedPath;
  if (fs.existsSync(customFixGenerated)) {
    fixGeneratedPath = customFixGenerated;
  } else {
    fixGeneratedPath = path.join(__dirname, '../generate/runtime-config-helpers/fix-generated.js');
  }
  await execQuietly(`node ${fixGeneratedPath}`, { cwd: projectMainPath });
};

const prettifyGenerated = async (projectMainPath: string, modulesPath = 'src') => {
  await execQuietly(`npx prettier --write "${modulesPath}/**/*.ts" "generated/**/*.ts" --log-level error`, {
    cwd: projectMainPath,
  });
};

export default class Generate extends Command {
  static description = 'generate GraphQL code';

  static examples = ['$ chimp generate', '$ chimp generate -a ~src -g ~chimp-helpers'];

  static flags = {
    help: flags.help({ char: 'h' }),
    appPrefix: flags.string({
      char: 'a',
      description: 'prefix that points to the sourcecode of your app',
      default: '~app',
    }),
    generatedPrefix: flags.string({
      char: 'g',
      description: 'prefix that points to the generated by chimp helper code',
      default: '~generated',
    }),
    modulesPath: flags.string({
      char: 'p',
      description:
        'path to the graphQL modules, only use if you are migrating an existing Apollo App and you want to use chimp only for a part of it',
    }),
  };

  async run() {
    const { flags } = this.parse(Generate);
    const projectMainPath = findProjectMainPath();

    const tasks = new Listr(
      [
        newTask('Generating code', async () =>
          executeGeneration(flags.appPrefix, flags.generatedPrefix, flags.modulesPath),
        ),
        newTask('Generating types', async () => runTypeGen(projectMainPath, flags.appPrefix)),
        newTask('Tweak the generated types', async () => fixGenerated(projectMainPath)),
        newTask('Prettify the generated code', async () => prettifyGenerated(projectMainPath, flags.modulesPath)),
      ],
      { renderer: ListrRenderer },
    );

    // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/no-empty-function
    await tasks.run().catch(() => {});
  }
}
